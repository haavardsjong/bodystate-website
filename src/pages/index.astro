---
import BaseLayout from '../layouts/BaseLayout.astro';
import * as i18nUtils from '../i18n/utils';

// Get current language
const lang = i18nUtils.getLangFromUrl(Astro.url);

// Map languages to App Store territories (using 3-letter ISO codes)
const languageToTerritory = {
  'en': 'USA',  // United States
  'es': 'ESP',  // Spain
  'fr': 'FRA',  // France
  'de': 'DEU',  // Germany
  'it': 'ITA',  // Italy
  'pt': 'BRA',  // Brazil (Portuguese)
  'ja': 'JPN',  // Japan
  'ko': 'KOR',  // Korea
  'zh': 'CHN',  // China
  'ru': 'RUS',  // Russia
  'nl': 'NLD',  // Netherlands
  'sv': 'SWE',  // Sweden
  'no': 'NOR',  // Norway
  'da': 'DNK',  // Denmark
};

const territory = languageToTerritory[lang] || 'USA';

// Example: Fetching App Store Reviews (SERVER-SIDE in Astro frontmatter)
// IMPORTANT: This is a conceptual example. You MUST handle authentication (JWT) securely.

// const APP_ID = '6479940325';
// const APP_STORE_CONNECT_API_TOKEN = import.meta.env.APP_STORE_CONNECT_API_TOKEN; // Store your JWT as an environment variable

let fetchedReviewsRaw = [];
let usedTerritory = territory; // Track which territory we actually used

// Fetch reviews during build
try {
        // During Netlify build, we can't call the function endpoint
        // Instead, we'll directly fetch from App Store API using the build-time JWT
        const apiToken = import.meta.env.APP_STORE_CONNECT_API_TOKEN_DYNAMIC || process.env.APP_STORE_CONNECT_API_TOKEN_DYNAMIC;
        const appId = import.meta.env.APP_STORE_APP_ID || process.env.APP_STORE_APP_ID || '6479940325';
        
        console.log(`[Build] API Token available: ${apiToken ? 'Yes' : 'No'}`);
        console.log(`[Build] App ID: ${appId}`);
        
        if (apiToken) {
            // Direct API call during build
            let APPLE_API_URL = `https://api.appstoreconnect.apple.com/v1/apps/${appId}/customerReviews?limit=50&sort=-createdDate&filter[territory]=${territory}&fields[customerReviews]=rating,title,body,reviewerNickname,createdDate,territory`;
            console.log(`[Build] Fetching reviews directly from Apple API for territory: ${territory}`);
            
            let response = await fetch(APPLE_API_URL, {
                headers: { 'Authorization': `Bearer ${apiToken}` }
            });
            console.log(`[Build] Apple API response status: ${response.status}`);

            if (response.ok) {
                const responseData = await response.json();
                const data = responseData.data || responseData; // Handle both wrapped and unwrapped responses
                
                // Filter to only 5-star reviews first to check if we have enough
                const fiveStarData = (data || []).filter(review => review.attributes?.rating === 5);
                
                if (fiveStarData.length >= 3) {
                    fetchedReviewsRaw = data; // Keep all for now, will filter later
                    console.log(`[Build] Successfully fetched ${data.length} reviews (${fiveStarData.length} five-star) for territory ${territory}`);
                } else {
                    // If less than 3 reviews and not already USA, fallback to USA
                    if (territory !== 'USA') {
                        console.log(`[Build] Only ${data ? data.length : 0} reviews for ${territory}, falling back to USA`);
                        APPLE_API_URL = `https://api.appstoreconnect.apple.com/v1/apps/${appId}/customerReviews?limit=50&sort=-createdDate&filter[territory]=USA&fields[customerReviews]=rating,title,body,reviewerNickname,createdDate,territory`;
                        response = await fetch(APPLE_API_URL, {
                            headers: { 'Authorization': `Bearer ${apiToken}` }
                        });
                        
                        if (response.ok) {
                            const usaResponseData = await response.json();
                            const usaData = usaResponseData.data || usaResponseData;
                            const usaFiveStarData = (usaData || []).filter(review => review.attributes?.rating === 5);
                            fetchedReviewsRaw = usaData;
                            usedTerritory = 'USA';
                            console.log(`[Build] Fetched ${usaData.length} reviews (${usaFiveStarData.length} five-star) from USA fallback`);
                        }
                    } else {
                        // It's already USA, use whatever we got
                        fetchedReviewsRaw = data || [];
                        console.log(`[Build] Using ${fetchedReviewsRaw.length} reviews from USA`);
                    }
                }
            } else {
                const errorText = await response.text();
                console.error(`[Build] Failed to fetch reviews. Status: ${response.status}, Body: ${errorText}`);
            }
        } else {
            console.error('[Build] No API token available - cannot fetch reviews');
        }
} catch (error) {
    console.error('[Build] Error during server-side fetch for reviews:', error);
}

// Filter to only 5-star reviews
const reviews = fetchedReviewsRaw.filter(review => review.attributes?.rating === 5);

function formatDate(dateString) {
    const options = { year: 'numeric', month: 'short', day: 'numeric' };
    return new Date(dateString).toLocaleDateString('en-US', options);
}

---
<BaseLayout title="BodyState - Give Your Body a Voice">
	<div class="hero">
		<h1>Give your body a voice.</h1>
		<p class="subtitle">Your body is complex. BodyState helps you understand it. It translates your health data into a battery for body and mind.</p>
		<div class="hero-image">
			<img src="/bodystate_hand.png" alt="BodyState App on Hand" />
		</div>
	</div>
	
	<!-- Features carousel section with full-width background -->
	<div class="features-area-wrapper">
		<div class="features-carousel-wrapper" id="featuresCarouselWrapper">
			<div class="features-grid" id="featuresGrid">
				<!-- Feature 1 -->
				<div class="feature-card">
					<div class="feature-content top-aligned">
						<h2 class="feature-headline">Give your body a voice.</h2>
					</div>
					<div class="feature-image bottom-aligned">
						<img src="/features/one_bottom.jpg" alt="BodyState main screen showing vitals" />
					</div>
				</div>
				
				<!-- Feature 2 -->
				<div class="feature-card">
					<div class="feature-content bottom-aligned">
						<h2 class="feature-headline">Track metrics that matter.</h2>
					</div>
					<div class="feature-image top-aligned">
						<img src="/features/two_top.jpg" alt="BodyState detailed metrics screen" />
					</div>
				</div>
				
				<!-- Feature 3 -->
				<div class="feature-card">
					<div class="feature-content top-aligned">
						<h2 class="feature-headline">Understand your patterns.</h2>
					</div>
					<div class="feature-image bottom-aligned">
						<img src="/features/three_bottom.jpg" alt="BodyState trends and insights" />
					</div>
				</div>
				
				<!-- Feature 4 -->
				<div class="feature-card">
					<div class="feature-content bottom-aligned">
						<h2 class="feature-headline">Optimize your energy.</h2>
					</div>
					<div class="feature-image top-aligned">
						<img src="/features/four_top.jpg" alt="BodyState energy optimization" />
					</div>
				</div>
				
				<!-- Feature 5 -->
				<div class="feature-card">
					<div class="feature-content top-aligned">
						<h2 class="feature-headline">Live life fully charged.</h2>
					</div>
					<div class="feature-image bottom-aligned">
						<img src="/features/five_bottom.jpg" alt="BodyState lifestyle integration" />
					</div>
				</div>
			</div>
		</div>
		<div class="features-nav-buttons-container content-container">
			<div class="features-nav-buttons">
				<button id="prevFeature" aria-label="Previous feature">
					<svg width="12" height="20" viewBox="0 0 9 14" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M8 1L1 7L8 13" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg>
				</button>
				<button id="nextFeature" aria-label="Next feature">
					<svg width="12" height="20" viewBox="0 0 9 14" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M1 1L8 7L1 13" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg>
				</button>
			</div>
		</div>
	</div>


	<!-- Section 2: Full-width black background with contained text -->
	<div class="full-width-black-area">
		<div class="reviews-outer-container">
			<div class="reviews-header-container content-container">
				<div class="apple-stats">
					<div class="rating-display">
						<span class="rating-number">4.7</span>
						<div class="stars-row">
							<span class="star-filled">★</span>
							<span class="star-filled">★</span>
							<span class="star-filled">★</span>
							<span class="star-filled">★</span>
							<span class="star-half">★</span>
						</div>
					</div>
					<div class="stats-divider"></div>
					<div class="users-count">
						<span class="count-number">200K+</span>
						<span class="count-label">Users Worldwide</span>
					</div>
				</div>
				<h2>What Our Users Say</h2>
			</div>
			<div class="reviews-carousel-wrapper" id="reviewsCarouselWrapper">
				<div class="reviews-grid" id="reviewsGrid">
					{reviews.length > 0 ? reviews.map(review => (
						<div class="review-card">
							<div class="review-rating">
								{'★'.repeat(review.attributes.rating)}
								{'☆'.repeat(5 - review.attributes.rating)}
							</div>
							<h3 class="review-title">{review.attributes.title}</h3>
							<p class="review-body">{review.attributes.body}</p>
							<p class="review-meta">
								<span class="review-nickname">– {review.attributes.reviewerNickname}</span>
								<span class="review-date">{formatDate(review.attributes.createdDate)}</span>
							</p>
						</div>
					)) : (
						<div class="content-container">
							<p class="no-reviews-message">No reviews available at the moment. Check back later!</p>
						</div>
					)}
				</div>
			</div>
			{reviews.length > 1 && (
				<div class="reviews-nav-buttons-container content-container">
					<div class="reviews-nav-buttons">
						<button id="prevReview" aria-label="Previous review">
							<svg width="12" height="20" viewBox="0 0 9 14" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M8 1L1 7L8 13" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg>
						</button>
						<button id="nextReview" aria-label="Next review">
							<svg width="12" height="20" viewBox="0 0 9 14" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M1 1L8 7L1 13" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg>
						</button>
					</div>
				</div>
			)}
		</div>
	</div>
	
	<!-- Floating Download Button Overlay -->
	<div id="download-overlay" class="download-overlay">
		<a href="https://apps.apple.com/no/app/bodystate/id6479940325" class="visionos-button" target="_blank" rel="noopener noreferrer">
			<span class="button-text">Download on App Store</span>
			<div class="blue-circle-icon">
				<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="3" stroke-linecap="round" stroke-linejoin="round">
					<path d="M9 18l6-6-6-6"></path>
				</svg>
			</div>
		</a>
	</div>

</BaseLayout>

<style>
	/* Hero section */
	.hero {
		text-align: center;
		margin-bottom: var(--space-xl);
		max-width: 800px;
		margin-left: auto;
		margin-right: auto;
		padding-top: var(--space-xl);
	}
	
	.hero h1 {
		font-size: 3.5rem;
		margin-bottom: var(--space-md);
		font-weight: 600;
		line-height: 1.2;
	}
	
	.subtitle {
		font-size: 1.3rem;
		max-width: 650px;
		margin-left: auto;
		margin-right: auto;
		font-weight: 300;
		line-height: 1.6;
		margin-bottom: var(--space-lg);
	}
	
	.hero-image {
		max-width: 100%;
		margin: 0 auto;
		padding: var(--space-md) 0;
	}
	
	.hero-image img {
		max-width: 100%;
		height: auto;
	}
	
	/* VisionOS-style button */
	.visionos-button {
		display: inline-flex;
		align-items: center;
		justify-content: space-between;
		background: var(--glass-bg);
		color: var(--text-primary);
		padding: 10px 10px 10px 25px; 
		border-radius: 100px;
		backdrop-filter: blur(15px);
		-webkit-backdrop-filter: blur(15px);
		min-width: 220px;
		width: auto;
		text-decoration: none;
		font-weight: 500; /* Keep user's change */
		border: 1px solid var(--glass-border);
		box-shadow: 0 8px 32px var(--glass-shadow);
		transition: all 0.2s ease;
	}
	
	.visionos-button:hover {
		border-color: rgba(255, 255, 255, 0.15);
		box-shadow: 0 8px 40px var(--glass-shadow), 0 0 15px var(--glass-glow);
	}
	
	.button-text {
		font-size: 18px; 
		font-weight: 500;
		letter-spacing: -0.022em;
	}
	
	.blue-circle-icon {
		display: flex;
		align-items: center;
		justify-content: center;
		width: 50px; /* Increased size */
		height: 50px; /* Increased size */
		background: #0071e3; /* Apple's blue */
		border-radius: 50%;
		flex-shrink: 0;
		margin-left: 20px;
		box-shadow: 0 0 10px rgba(0, 113, 227, 0.5);
	}
	
	.blue-circle-icon svg {
		color: white;
		stroke-width: 3;
	}
	
	/* Responsive adjustments */
	@media (max-width: 768px) {
		.hero h1 {
			font-size: 2.5rem;
		}
		
		.subtitle {
			font-size: 1.1rem;
			padding: 0 var(--space-sm);
		}
		
		.visionos-button {
			min-width: 200px;
		}
	}
	
	/* Features carousel styles */
	.features-area-wrapper {
		background: linear-gradient(to bottom, #000000 0%, #121212 50%, #242424 100%);
		padding-bottom: var(--space-xl);
		width: 100vw;
		position: relative;
		left: 50%;
		transform: translateX(-50%);
	}

	.features-carousel-wrapper {
		overflow-x: auto;
		overflow-y: hidden;
		-ms-overflow-style: none;
		scrollbar-width: none;
		margin: 6rem 0 0 0;
		padding: 2rem calc((100vw - 1200px) / 2);
	}
	
	.features-carousel-wrapper::-webkit-scrollbar {
		display: none;
	}
	
	.features-grid {
		display: flex;
		gap: 2rem;
		padding: 2rem;
	}
	
	.feature-card {
		flex: 0 0 auto;
		width: 450px;
		height: 675px;
		background: var(--glass-bg);
		border-radius: var(--radius-lg);
		border: 1px solid var(--glass-border);
		backdrop-filter: blur(15px);
		-webkit-backdrop-filter: blur(15px);
		box-shadow: 0 8px 32px var(--glass-shadow);
		position: relative;
		overflow: hidden;
	}
	
	.feature-content {
		position: absolute;
		left: 0;
		right: 0;
		z-index: 2;
		padding: 3rem;
		text-align: center;
	}
	
	.feature-content.top-aligned {
		top: 0;
	}
	
	.feature-content.bottom-aligned {
		bottom: 2.5rem;
	}
	
	.feature-headline {
		font-size: 2.5rem;
		font-weight: 600;
		color: var(--text-primary);
		line-height: 1.2;
		margin: 0;
	}
	
	.feature-image {
		position: absolute;
		left: 50%;
		transform: translateX(-50%);
		z-index: 1;
	}
	
	.feature-image.top-aligned {
		top: 0;
	}
	
	.feature-image.bottom-aligned {
		bottom: 0;
	}
	
	.feature-image img {
		width: auto;
		display: block;
	}
	
	.feature-image.top-aligned img {
		height: 450px;
	}
	
	.feature-image.bottom-aligned img {
		height: 495px;
	}
	
	/* Navigation buttons */
	.features-nav-buttons-container {
		display: flex;
		justify-content: center;
		padding-top: var(--space-md);
		margin-top: var(--space-md);
	}
	
	.features-nav-buttons {
		display: inline-flex;
		gap: var(--space-md);
	}
	
	.features-nav-buttons button {
		background-color: rgba(50, 50, 50, 0.5);
		border: 1px solid rgba(255,255,255,0.1);
		color: rgba(255,255,255,0.7);
		border-radius: 50%;
		width: 54px;
		height: 54px;
		cursor: pointer;
		transition: all 0.2s ease;
		display: flex;
		align-items: center;
		justify-content: center;
	}
	
	.features-nav-buttons button:hover {
		background-color: rgba(65, 65, 65, 0.7);
		color: rgba(255,255,255,0.9);
		border-color: rgba(255,255,255,0.2);
	}
	
	.features-nav-buttons button svg {
		width: 14px;
		height: auto;
	}
	
	/* Responsive features carousel */
	@media (max-width: 768px) {
		.features-carousel-wrapper {
			padding: 0 1rem;
			margin: 4rem 0 0 0;
		}
		
		.features-grid {
			padding: 1rem;
			gap: 1rem;
		}
		
		.feature-card {
			width: 340px;
			height: 510px;
		}
		
		.feature-content {
			padding: 2rem;
		}
		
		.feature-headline {
			font-size: 2rem;
		}
		
		.feature-image.top-aligned img {
			height: 340px;
		}
		
		.feature-image.bottom-aligned img {
			height: 375px;
		}
	}

	/* Content sections styling */
	.content-section {
		padding-top: var(--space-xl);
		padding-bottom: var(--space-xl);
		text-align: center;
		/* Ensure content sections are not wider than their parent .content-container if nested */
		width: 100%; 
		box-sizing: border-box;
	}

	.content-section h2 {
		font-size: 2.5rem;
		margin-bottom: var(--space-md);
		font-weight: 600;
		color: var(--text-primary); /* Default for these sections */
	}

	.content-section p {
		font-size: 1.3rem;
		max-width: 650px;
		margin-left: auto;
		margin-right: auto;
		font-weight: 300;
		line-height: 1.6;
		color: var(--text-secondary); /* Default, can be overridden if needed */
	}

	/* Section 1: Full Width Gray Area */
	.full-width-gray-area {
		background-color: #242424; /* Match end color of bento gradient */
		position: relative; 
		width: 100vw;
		left: 50%;
		transform: translateX(-50%);
		z-index: 0; /* Ensure it's above default, below higher z-index elements */
	}
	.full-width-gray-area h2,
	.full-width-gray-area p {
		color: var(--text-primary); /* Brighter text for contrast on gray */
	}

	/* Section 2: Full Width Black Area */
	.full-width-black-area {
		background-color: #000;
		position: relative; 
		z-index: 1; /* To draw above the fixed .bg-gradient-transition */
		width: 100vw;
		left: 50%;
		transform: translateX(-50%);
		padding-bottom: calc(var(--space-xl) + 60px);
	}
	/* Text color for p in black section will use .content-section p default (var(--text-secondary)) */
	/* Text color for h2 in black section will use .content-section h2 default (var(--text-primary)) */

	.reviews-outer-container {
		/* This container is full-width black */
		/* It allows the .reviews-carousel-wrapper to be offset for the peek effect */
		padding-bottom: var(--space-lg);
	}

	.reviews-header-container {
		/* Uses .content-container for max-width and padding */
		text-align: center;
		padding-top: var(--space-xl);
		margin-bottom: var(--space-lg);
	}
	.reviews-header-container h2 {
		font-size: 2.5rem;
		font-weight: 600;
		color: var(--text-primary);
		margin-top: var(--space-lg);
	}

	/* Apple-style stats section */
	.apple-stats {
		display: flex;
		align-items: center;
		justify-content: center;
		gap: 3rem;
		margin-bottom: var(--space-md);
	}

	.rating-display {
		display: flex;
		align-items: center;
		gap: 0.75rem;
	}

	.rating-number {
		font-size: 3.5rem;
		font-weight: 700;
		color: var(--text-primary);
		line-height: 1;
		letter-spacing: -0.02em;
	}

	.stars-row {
		display: flex;
		gap: 0.125rem;
		font-size: 1.25rem;
	}

	.star-filled {
		color: #f5a623;
	}

	.star-half {
		position: relative;
		color: rgba(255, 255, 255, 0.2);
	}

	.star-half::before {
		content: '★';
		position: absolute;
		left: 0;
		width: 50%;
		overflow: hidden;
		color: #f5a623;
	}

	.stats-divider {
		width: 1px;
		height: 60px;
		background: rgba(255, 255, 255, 0.1);
	}

	.users-count {
		display: flex;
		flex-direction: column;
		align-items: flex-start;
		gap: 0.25rem;
	}

	.count-number {
		font-size: 2rem;
		font-weight: 600;
		color: var(--text-primary);
		letter-spacing: -0.02em;
	}

	.count-label {
		font-size: 0.875rem;
		color: var(--text-secondary);
		font-weight: 400;
		letter-spacing: -0.01em;
	}

	@media (max-width: 768px) {
		.apple-stats {
			flex-direction: column;
			gap: 2rem;
		}

		.stats-divider {
			width: 100px;
			height: 1px;
		}

		.rating-number {
			font-size: 3rem;
		}

		.users-count {
			align-items: center;
		}
	}

	.reviews-carousel-wrapper {
		overflow-x: auto;
		overflow-y: hidden;
		-ms-overflow-style: none;
		scrollbar-width: none;
		margin: 0;
		padding: 0 calc((100vw - 1200px) / 2);
	}
	
	.reviews-carousel-wrapper::-webkit-scrollbar {
		display: none;
	}

	.reviews-grid {
		display: flex;
		gap: 2rem;
		padding: 2rem;
	}

	.review-card {
		flex: 0 0 auto;
		width: 450px;
		background: rgba(255, 255, 255, 0.04);
		border-radius: 24px;
		border: 1px solid rgba(255, 255, 255, 0.08);
		backdrop-filter: blur(20px) saturate(180%);
		-webkit-backdrop-filter: blur(20px) saturate(180%);
		box-shadow: 0 12px 40px rgba(0, 0, 0, 0.3);
		padding: 2rem;
		display: flex;
		flex-direction: column;
		box-sizing: border-box;
		transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
	}

	.review-card:hover {
		background: rgba(255, 255, 255, 0.06);
		border-color: rgba(255, 255, 255, 0.12);
		transform: translateY(-2px);
		box-shadow: 0 16px 48px rgba(0, 0, 0, 0.4);
	}

	.no-reviews-message {
		color: var(--text-secondary);
		width: 100%;
		text-align: center;
		padding: var(--space-lg) 0;
		font-style: italic;
	}

	.review-rating {
		font-size: 1.125rem;
		color: #f5a623; 
		margin-bottom: 0.75rem;
		letter-spacing: 0.05em;
	}

	.review-title {
		font-size: 1.25rem;
		font-weight: 600;
		color: var(--text-primary);
		margin-bottom: 0.75rem;
		line-height: 1.3;
		letter-spacing: -0.02em;
	}

	.review-body {
		font-size: 1rem;
		color: rgba(255, 255, 255, 0.8);
		line-height: 1.65;
		flex-grow: 1; 
		margin-bottom: 1.5rem;
		font-weight: 400;
		letter-spacing: -0.01em;
	}

	.review-meta {
		font-size: 0.875rem;
		color: rgba(255, 255, 255, 0.5);
		display: flex;
		justify-content: space-between;
		align-items: center;
		border-top: 1px solid rgba(255,255,255,0.06);
		padding-top: 1rem;
		margin-top: auto;
	}

	.review-nickname {
		font-weight: 500;
		font-style: normal;
		color: rgba(255, 255, 255, 0.6);
	}

	.reviews-nav-buttons-container {
		display: flex;
		justify-content: center;
		padding-top: var(--space-md);
	}

	.reviews-nav-buttons {
		display: inline-flex;
		gap: var(--space-md);
	}

	.reviews-nav-buttons button {
		background: rgba(255, 255, 255, 0.06);
		backdrop-filter: blur(20px) saturate(180%);
		-webkit-backdrop-filter: blur(20px) saturate(180%);
		border: 1px solid rgba(255,255,255,0.08);
		color: rgba(255,255,255,0.8);
		border-radius: 50%; 
		width: 48px; 
		height: 48px;
		cursor: pointer;
		transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
		display: flex;
		align-items: center;
		justify-content: center;
		box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
	}
	
	.reviews-nav-buttons button:hover {
		background: rgba(255, 255, 255, 0.1);
		color: rgba(255,255,255,1);
		border-color: rgba(255,255,255,0.15);
		transform: scale(1.05);
		box-shadow: 0 6px 24px rgba(0, 0, 0, 0.3);
	}
	
	.reviews-nav-buttons button:active {
		transform: scale(0.98);
	}
	
	.reviews-nav-buttons button svg {
		width: 14px;
		height: auto;
	}
	
	/* Responsive reviews carousel */
	@media (max-width: 768px) {
		.reviews-carousel-wrapper {
			padding: 0 1rem;
		}
		
		.reviews-grid {
			padding: 1rem;
			gap: 1rem;
		}
		
		.review-card {
			width: 340px;
		}
	}

	footer {
		background: transparent; /* Default, overridden by .glass */
		padding: var(--space-md) 0;
		text-align: center;
		font-size: 0.9rem;
		color: var(--text-tertiary);
		margin-top: var(--space-xl);
	}

	footer.glass { 
		background: var(--glass-bg);
		backdrop-filter: blur(15px);
	}

	/* Download button overlay enhancements */
	.download-overlay {
		position: fixed;
		bottom: var(--space-lg);
		left: 50%;
		transform: translateX(-50%);
		z-index: 100;
		opacity: 0;
		transform: translateX(-50%) translateY(100%) scale(0.9); /* Initial hidden state */
		pointer-events: none;
		transition: opacity 0.4s cubic-bezier(0.68, -0.55, 0.27, 1.55), transform 0.4s cubic-bezier(0.68, -0.55, 0.27, 1.55);
	}

	.download-overlay.show-download-button {
		opacity: 1;
		transform: translateX(-50%) translateY(0) scale(1); /* Visible state */
		pointer-events: auto;
	}

</style>

<script>
	document.addEventListener('DOMContentLoaded', () => {
		// Features carousel logic
		const featuresGrid = document.getElementById('featuresGrid');
		const prevFeatureButton = document.getElementById('prevFeature');
		const nextFeatureButton = document.getElementById('nextFeature');
		const featuresCarouselWrapper = document.getElementById('featuresCarouselWrapper');

		if (featuresGrid && prevFeatureButton && nextFeatureButton && featuresCarouselWrapper) {
			const scrollFeatureAmount = () => {
				const firstCard = featuresGrid.querySelector('.feature-card');
				if (firstCard) {
					const cardStyle = getComputedStyle(firstCard);
					const cardGap = parseFloat(getComputedStyle(featuresGrid).gap) || 0;
					return firstCard.offsetWidth + cardGap;
				}
				return featuresCarouselWrapper.clientWidth * 0.8;
			};

			prevFeatureButton.addEventListener('click', () => {
				featuresCarouselWrapper.scrollBy({ left: -scrollFeatureAmount(), behavior: 'smooth' });
			});

			nextFeatureButton.addEventListener('click', () => {
				featuresCarouselWrapper.scrollBy({ left: scrollFeatureAmount(), behavior: 'smooth' });
			});
		}

		// Reviews carousel logic
		const reviewsGrid = document.getElementById('reviewsGrid');
		const prevButton = document.getElementById('prevReview');
		const nextButton = document.getElementById('nextReview');
		const reviewsCarouselWrapper = document.getElementById('reviewsCarouselWrapper');

		if (reviewsGrid && prevButton && nextButton && reviewsCarouselWrapper) {
			const scrollAmount = () => {
				const firstCard = reviewsGrid.querySelector('.review-card');
				if (firstCard) {
					const cardStyle = getComputedStyle(firstCard);
					const cardGap = parseFloat(getComputedStyle(reviewsGrid).gap) || 0;
					return firstCard.offsetWidth + cardGap;
				} 
				return reviewsCarouselWrapper.clientWidth * 0.8; // Fallback
			};

			prevButton.addEventListener('click', () => {
				reviewsCarouselWrapper.scrollBy({ left: -scrollAmount(), behavior: 'smooth' });
			});

			nextButton.addEventListener('click', () => {
				reviewsCarouselWrapper.scrollBy({ left: scrollAmount(), behavior: 'smooth' });
			});
		}

		// Floating download button logic
		const downloadButtonOverlay = document.querySelector('.download-overlay');
		const heroSection = document.querySelector('.hero'); 
		const siteFooter = document.querySelector('footer.site-footer');

		if (downloadButtonOverlay && heroSection && siteFooter) {
			const handleScroll = () => {
				const heroRect = heroSection.getBoundingClientRect();
				const footerRect = siteFooter.getBoundingClientRect();
				const viewportHeight = window.innerHeight;

				// Condition 1: Is the user at the "start" (hero section prominent)?
				// Hero is considered prominent if its bottom edge is still within the viewport.
				const atStart = heroRect.bottom > 0 && heroRect.top < viewportHeight;

				// Condition 2: Is the user at the "end" (footer encroaching on button)?
				const buttonHeight = downloadButtonOverlay.offsetHeight;
				// Get the 'bottom' style value (e.g., 'var(--space-lg)') and parse it
				const buttonBottomCssValue = parseFloat(getComputedStyle(downloadButtonOverlay).bottom);

				// Add checks for valid numbers to prevent errors
				if (isNaN(buttonHeight) || isNaN(buttonBottomCssValue)) {
					console.warn('Floating Download Button: Could not get valid button height or bottom CSS value.');
					return; // Exit if values are not valid
				}
				
				// Calculate the Y coordinate of the button's top edge in the viewport
				const buttonTopEdgeY = viewportHeight - buttonBottomCssValue - buttonHeight;

				// Footer is encroaching if its top edge is above the button's top edge (plus a small buffer)
				// Or, more simply, if footer's top is higher than the button's bottom edge allowing for overlap.
				// Let's hide if footer's top is less than button's (calculated) bottom edge in viewport + 20px buffer for safety.
				const buttonBottomEdgeY = viewportHeight - buttonBottomCssValue;
				const atEnd = footerRect.top < (buttonBottomEdgeY + 20); // Hide if footer top is above button's bottom + 20px padding

				if (!atStart && !atEnd) {
					downloadButtonOverlay.classList.add('show-download-button');
				} else {
					downloadButtonOverlay.classList.remove('show-download-button');
				}
			};

			// Optimized scroll listener
			let ticking = false;
			window.addEventListener('scroll', () => {
				if (!ticking) {
					ticking = true;
					window.requestAnimationFrame(() => {
						handleScroll();
						ticking = false;
					});
				}
			});

			// Initial check on page load
			setTimeout(handleScroll, 100); // Adding a slight delay for initial call to ensure layout is stable
			
		} else {
			console.error('Floating Download Button: Could not find one or more required elements:', 
				{downloadButtonOverlay, heroSection, siteFooter});
		}
	});
</script>

